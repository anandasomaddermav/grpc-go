// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: o1pmstream/pm_pdsus.proto

package o1pmstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PMStreamClient is the client API for PMStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PMStreamClient interface {
	StreamPMData(ctx context.Context, opts ...grpc.CallOption) (PMStream_StreamPMDataClient, error)
}

type pMStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewPMStreamClient(cc grpc.ClientConnInterface) PMStreamClient {
	return &pMStreamClient{cc}
}

func (c *pMStreamClient) StreamPMData(ctx context.Context, opts ...grpc.CallOption) (PMStream_StreamPMDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &PMStream_ServiceDesc.Streams[0], "/o1pmstream.PMStream/StreamPMData", opts...)
	if err != nil {
		return nil, err
	}
	x := &pMStreamStreamPMDataClient{stream}
	return x, nil
}

type PMStream_StreamPMDataClient interface {
	Send(*PDSUs) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type pMStreamStreamPMDataClient struct {
	grpc.ClientStream
}

func (x *pMStreamStreamPMDataClient) Send(m *PDSUs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pMStreamStreamPMDataClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PMStreamServer is the server API for PMStream service.
// All implementations must embed UnimplementedPMStreamServer
// for forward compatibility
type PMStreamServer interface {
	StreamPMData(PMStream_StreamPMDataServer) error
	mustEmbedUnimplementedPMStreamServer()
}

// UnimplementedPMStreamServer must be embedded to have forward compatible implementations.
type UnimplementedPMStreamServer struct {
}

func (UnimplementedPMStreamServer) StreamPMData(PMStream_StreamPMDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPMData not implemented")
}
func (UnimplementedPMStreamServer) mustEmbedUnimplementedPMStreamServer() {}

// UnsafePMStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PMStreamServer will
// result in compilation errors.
type UnsafePMStreamServer interface {
	mustEmbedUnimplementedPMStreamServer()
}

func RegisterPMStreamServer(s grpc.ServiceRegistrar, srv PMStreamServer) {
	s.RegisterService(&PMStream_ServiceDesc, srv)
}

func _PMStream_StreamPMData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PMStreamServer).StreamPMData(&pMStreamStreamPMDataServer{stream})
}

type PMStream_StreamPMDataServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PDSUs, error)
	grpc.ServerStream
}

type pMStreamStreamPMDataServer struct {
	grpc.ServerStream
}

func (x *pMStreamStreamPMDataServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pMStreamStreamPMDataServer) Recv() (*PDSUs, error) {
	m := new(PDSUs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PMStream_ServiceDesc is the grpc.ServiceDesc for PMStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PMStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o1pmstream.PMStream",
	HandlerType: (*PMStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPMData",
			Handler:       _PMStream_StreamPMData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "o1pmstream/pm_pdsus.proto",
}
